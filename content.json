{"pages":[{"title":"","permalink":"http://yoursite.com/about/index.html","text":"宅！"},{"title":"<spring cloud 微服务架构进阶>读书笔记","permalink":"http://yoursite.com/spring-cloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%BF%9B%E9%98%B6-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.html","text":"微服务架构组成 服务注册和发现 euraka 服务网关 zuul springcloud-gateway Hystrix 负载均衡 feign 配置中心 springcloud-config 集成框架 调用链监控 zipkin 支撑平台 docker k8s 微服务架构实现 spring-cloud ZeroC iceGrid 基于消息队列的异步通信实现 docker swarm"},{"title":"","permalink":"http://yoursite.com/todoList/index.html","text":"springboot 集成 springCloudConfig 是否可以脱离euraka实现 如何实现灰度发布，如何实现配置热切换"}],"posts":[{"title":"front-back-seperate","permalink":"http://yoursite.com/2020/01/08/front-back-seperate/","text":"如何做分离分离职责前后端仅通过异步接口来编程，前后端都各自有自己的开发流程，构建工具，测试集合。 接口规范规范原则 接口返回数据即显示：前端仅做渲染逻辑处理 渲染逻辑禁止跨多个接口调用 前端关注交互、渲染逻辑，尽量避免业务逻辑处理的出现 请求响应传输数据格式：JSON，JSON数据尽量简单轻量，避免多级JSON的出现 基本格式请求格式get 1user/login?body=&#123;\"uname\":\"root\",\"pwd\":\"root\"&#125; post 1&#123;\"uname\":\"root\",\"pwd\":\"root\"&#125; 返回格式 12345&#123; \"code\":1, //返回状态码 1成功，其他失败 \"message\":\"请求成功\", //返回信息描述 \"data\": jsonObj //返回值&#125; java后端规范 domain中现有POJO已经满足接口要求的，直接返回POJO domain中现有POJO无法满足接口要求的，如返回结果需要组合用户/角色/权限三种POJO，请声明一个新的POJO，以业务名+Vo命名，如 UserRolePrivilegeVo 后端新增ResultData，依据返回格式： 12345678public class ResultData&lt;T&gt; &#123; private String code; private String msg; private T data;&#125; 后端接口不论业务成功与否，统一返回ResultData对象，方便前端做拦截和异常统一提示 老的前端代码包含业务逻辑，请将这些逻辑迁移到后端实现 老的前端代码包含参数校验规则，请将这些规则交由前端实现"},{"title":"java Throwable/Error/Exception","permalink":"http://yoursite.com/2019/12/26/Throwable-Error-Exception/","text":"Exception 与 Error总结： Error：影响jvm运行的问题，程序不需要捕获，也无法解决 Exception: 程序可以捕获和处理的异常 UncheckedException: 运行时异常，可以通过编码避免的异常，如空指针/数组越界 CheckedException: 程序必须捕获，并提供异常处理逻辑，如IO异常/网络连接异常 不要把异常用于流程控制，会导致代码不易维护，同时影响性能 不要用try块包裹大代码块，会影响jvm代码优化 throw early, catch later原则 Exception和Error都继承自Throwable对象，在Java中只有Throwable对象可以被抛出(throw)和捕捉(catch)，它是异常处理机制的实现基础。 ErrorError类javaDoc 1234567891011121314* An &#123;@code Error&#125; is a subclass of &#123;@code Throwable&#125;* that indicates serious problems that a reasonable application* should not try to catch（一个设计合理的应用不应当捕捉的严重问题）. Most such errors are abnormal conditions.* The &#123;@code ThreadDeath&#125; error, though a \"normal\" condition,* is also a subclass of &#123;@code Error&#125; because most applications* should not try to catch it.* &lt;p&gt;* A method is not required to declare in its &#123;@code throws&#125;* clause any subclasses of &#123;@code Error&#125; that might be thrown* during the execution of the method but not caught, since these* errors are abnormal conditions that should never occur.（方法不应捕捉Error和它的子类，因为这类异常是不应该出现的非正常情况）** That is, &#123;@code Error&#125; and its subclasses are regarded as unchecked* exceptions for the purposes of compile-time checking of exceptions. 从以上可以看出，Error指的是极端情况下出现的异常，一般这类异常出现后，JVM已经处于非正常状态，即使捕捉到异常程序也没有办法作出补救，比如上图中的OOMError/StackOverflowError. Exception12345678910* The class &#123;@code Exception&#125; and its subclasses are a form of* &#123;@code Throwable&#125; that indicates conditions that a reasonable* application might want to catch.(设计合理的应用也许会捕捉Exception和它的子类)** &lt;p&gt;The class &#123;@code Exception&#125; and any subclasses that are not also* subclasses of &#123;@link RuntimeException&#125; are &lt;em&gt;checked* exceptions&lt;/em&gt;（所有Exception子类，如果不是RuntimeException的子类，都属于CheckedException）. Checked exceptions need to be declared in a* method or constructor's &#123;@code throws&#125; clause if they can be thrown* by the execution of the method or constructor and propagate outside* the method or constructor boundary.（checkedException必须在方法中throws部分显示声明，并向外层调用传递） Exception是Java允许程序主动捕获/传递的异常。分为CheckedException和UncheckedException两部分。 UncheckedExceptionRuntimeException及其子类均属于UncheckedException，又称为运行时异常。该类异常一般认为可以通过合理编码避免的异常，如NullPointerException/ArrayIndexOutOfBoundsException，这些异常都可以通过一些边界检查代码避免，Java不会在编译期强制要求程序捕捉和处理。 CheckedExceptionCheckedException是必须在程序中显式的捕捉和处理的一类异常。此类异常一般不是可以通过编码规避的，程序必须负责提供异常处理逻辑。如IOException/ConnectionException等外部环境导致的异常。 异常处理建议第一，不要用抛出异常来控制代码流程，由于java实例化一个异常时需要对栈进行快照，这是一个相对比较重的操作。第二，不要用try块包裹一大块代码，尽量哪里抛异常包裹哪里。try块会影响jvm对代码的优化。第三，不要生吞异常，在catch块中把异常忽略掉，不做处理。此类情况往往是基于假设这类异常绝对不会发生。第四，不要捕捉Error，更不要捕捉Throwable，尽量明确捕捉一个特定异常，多个异常多个catch块处理。第五，throw early, catch later原则。有可能抛出异常的代码尽量提早执行。第六，finally块不要处理需要return的对象，否则会影响到try块或catch块中return的对象"},{"title":"redis缓存实现","permalink":"http://yoursite.com/2019/01/06/redis/","text":"设计要求系统数据字典类数据属于读远大于写的业务数据，在业务层和数据层之间插入缓存层可以极大提高读取速度。但需要解决如下问题： 数据同步，数据新增/删除/修改时同步缓存数据 缓存穿透/击穿/雪崩问题避免 编码方式足够简单，现有redis客户端仅对redis命令进行封装，更上层的封装仍需要自己实现 前期设计思路 前期设计思路，实际编码与思路有差异 实际实现思路 缓存穿透：bloomFilter + 黑名单 缓存击穿/缓存雪崩：随机TTL或永不过期（数据字典数据量小，不存在内存不足问题） 数据字典类型数据：根据数据字典数据结构特点，使用 key:redisHash:&lt;dataKey:data&gt; 方式组织数据 新增数据：更新bloomFilter，更新黑名单，插入redis 删除数据：更新bloomFilter，更新黑名单，删除redis 更新数据：更新redis，更新db 查询数据： bloomFilter过滤 黑名单过滤 缓存查找 缓存命中：返回数据 缓存未命中：查询db db查询到数据时，新增数据逻辑 db未查询到数据时，删除数据逻辑 数据序列化：Kryo protoBuff等速度快，但使用不便，需要注册java对象类型，改用jackson2"}]}